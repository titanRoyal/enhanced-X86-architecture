let Adr = {
  //Registers
  REG_IP: 0x0,
  REG_ACC: 0x1,
  REG_R1: 0x2,
  REG_R2: 0x3,
  REG_R3: 0x4,
  REG_R4: 0x5,
  REG_R5: 0x6,
  REG_R6: 0x7,
  REG_R7: 0x8,
  REG_R8: 0x9,
  REG_SP: 0xa,
  REG_FP: 0xb,
  ASCII: 0xb9,
  WR_LIT: 0xba,
  WR_REG: 0xbc,
  WR_ADR: 0xbd,
  WNL: 0xbb,
  //Instructions
  MOV_LIT_REG: 0x20,
  ADD_REG_REG: 0x21,
  MOV_REG_REG: 0x22,
  MOV_LIT_REG_REG: 0x23,
  MOV_MEM_REG: 0x24,
  MOV_REG_MEM: 0x25,
  MOV_LIT_MEM: 0x26,
  MOV_REG_PTR_REG: 0x27,
  MOV_LIT_OFF_REG: 0x28,
  //jump
  JNE: 0x41,
  JNE_REG: 0x42,
  JEQ_LIT: 0x43,
  JEQ_REG: 0x44,
  JLT_LIT: 0x45,
  JLT_REG: 0x46,
  JLE_LIT: 0x47,
  JLE_REG: 0x48,
  JGT_LIT: 0x49,
  JGT_REG: 0x4a,
  JGE_LIT: 0x4b,
  JGE_REG: 0x4c,
  //stack manipulation
  PSH_LIT: 0x60,
  PSH_REG: 0x61,
  PSH_ADR: 0x62,
  POP: 0x63,
  //caling
  CAL_LIT: 0x80,
  CAL_REG: 0x81,
  RET: 0x82,
  //Atethmetic
  ADD_REG_LIT: 0xa0,
  SUB_LIT_REG: 0xa1,
  SUB_REG_LIT: 0xa2,
  SUB_REG_REG: 0xa3,
  INC: 0xa4,
  DEC: 0xa5,
  MULT_LIT_REG: 0xa6,
  MULT_REG_REG: 0xa7,
  LSH_REG_LIT: 0xa8,
  LSH_REG_REG: 0xa9,
  RSH_REG_LIT: 0xaa,
  RSH_REG_REG: 0xab,
  AND_REG_LIT: 0xac,
  AND_REG_REG: 0xad,
  OR_REG_LIT: 0xae,
  OR_REG_REG: 0xaf,
  XOR_REG_LIT: 0xb0,
  XOR_REG_REG: 0xb1,
  NOT_REG: 0xb2,
  NOT_LIT: 0xb5,
  INT_LIT: 0xb3,
  INT_REG: 0xb6,
  RTI: 0xb4,
  STR: 0xb7,
  CONST: 0xb8,
  ///

  //stop
  HLT: 0xff,
};
